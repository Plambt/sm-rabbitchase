
#Extends "Modes/ShootMania/Base/ModeShootmania.Script.txt"

#Const  CompatibleMapTypes  "MeleeArena"
#Const  Version             "2.0.0"
#Const  ScriptName          "Modes/ShootMania/RabbitChase.Script.txt"

#Const C_HudModulePath "Nadeo/ShootMania/Melee/Hud.Module.Gbx"
#Const C_RabbitStatusLayerName "RabbitStatus"

#Include "MathLib" as Math
#Include "TextLib" as TextLib
#Include "TimeLib" as TimeLib
#Include "Libs/Nadeo/Interface.Script.txt" as Interface

#Setting S_TimeLimit            600     as _("Time Limit")
#Setting S_RabbitArmor          3       as _("Rabbit Armor Count")
#Setting S_HunterArmor          1       as _("Hunter Armor Count")
#Setting S_DisablePointsLoss    False   as _("Disable Points Loss")

#Struct K_RabbitInfo {
    Ident RabbitPlayerId;
    Ident LastHitRabbitPlayerId;
}


***Match_LogVersions***
***
Log::RegisterScript(ScriptName, Version);
***


***Match_Settings***
***
MB_Settings_UseDefaultHud = False;
MB_Settings_UseDefaultTimer = False;
***


***Match_Rules***
***
ModeInfo::SetName("Rabbit Chase");
ModeInfo::SetType("Hunters vs Rabbit");
ModeInfo::SetRules(
"""Hunt to become the rabbit, then eliminate the hunters to survive.

Gain 1 point for landing a hit, lose 1 point for getting hit.

The match ends when the time runs out.""");
ModeInfo::SetStatusMessage(_("Hunt the rabbit"));
***


***Match_LoadHud***
***
Hud_Load(C_HudModulePath);
if (Hud != Null && Hud.ScoresTable != Null) {
    Hud.ScoresTable.Scores_Sort(CModulePlaygroundScoresTable::EScoreSortOrder::SMPoints);
}
***


***Match_SpawnScreen***
***
SpawnScreen::CreateScores("Score.RoundPoints");
***


***Match_StartServer***
***
UseClans = False;
UseForcedClans = False;
Interface::CreateRank();
Layers::Create(C_RabbitStatusLayerName, RabbitStatusML(Null));
***


***Match_InitMap***
***
declare Ident[] SpawnsList;
declare K_RabbitInfo RabbitInfo;
***


***Match_StartMap***
***
SpawnsList = Ident[];

if (Hud != Null && Hud.ScoresTable != Null) {
    Hud.ScoresTable.SetFooterText(TextLib::Compose("Time limit - " ^ TextLib::TimeToText(S_TimeLimit * 1000)));
}

StartTime = Now;
if (S_TimeLimit > 0) {
    EndTime = StartTime + (S_TimeLimit * 1000);
} else {
    EndTime = -1;
}

//Users_CreateFake("fakeplayer_03", 0);
//Users_CreateFake("fakeplayer_04", 0);

Layers::Attach(C_RabbitStatusLayerName);
***


***Match_PlayLoop_HandleEvents***
***
foreach (Event in PendingEvents) {
    if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) {
        if (Event.VictimEntity != Null && (Event.VictimEntity is CSmPlayer)) {
            declare CSmPlayer VictimPlayer <=> (Event.VictimEntity as CSmPlayer);
            if (!S_DisablePointsLoss) {
                Scores::RemovePlayerRoundPoints(VictimPlayer.Score, 1);
            }
            if (VictimPlayer.Id == RabbitInfo.RabbitPlayerId) {
                RabbitInfo.RabbitPlayerId = NullId;
            }
        }
        Events::Valid(Event);
    } else if (Event.Type == CSmModeEvent::EType::OnHit) {
        if (Event.ShooterEntity != Null
            && (Event.ShooterEntity is CSmPlayer)
            && Event.VictimEntity != Null
            && (Event.VictimEntity is CSmPlayer)
            && Event.ShooterEntity.Id != Event.VictimEntity.Id
            && (Event.ShooterEntity.Id == RabbitInfo.RabbitPlayerId || Event.VictimEntity.Id == RabbitInfo.RabbitPlayerId)) {
            declare CSmPlayer ShooterPlayer <=> (Event.ShooterEntity as CSmPlayer);
            Scores::AddPlayerRoundPoints(ShooterPlayer.Score, 1);
            if (Event.VictimEntity.Id == RabbitInfo.RabbitPlayerId) {
                RabbitInfo.LastHitRabbitPlayerId = Event.ShooterEntity.Id;
            }
            Events::Valid(Event);
        } else {
            Events::Invalid(Event);
        }
    } else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
        if (Event.Player.Id == RabbitInfo.RabbitPlayerId) {
            RabbitInfo.RabbitPlayerId = NullId;
        }
        if (!S_DisablePointsLoss) {
            Scores::RemovePlayerRoundPoints(Event.Player.Score, 1);
        }
        Events::Valid(Event);
    } else {
        Events::Valid(Event);
    }
}
***


***Match_PlayLoop_SpawnPlayers***
***
foreach (Player in Players) {
    if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && !Player.RequestsSpectate) {
        if (SpawnsList.count == 0) {
            foreach (MapLandmark in MapLandmarks_PlayerSpawn) {
                SpawnsList.add(MapLandmark.Id);
            }
        }
        declare Ident SpawnId = NullId;
        if (SpawnsList.count == 1) {
            SpawnId = SpawnsList[0];
        } else if (SpawnsList.count > 1) {
            SpawnId = SpawnsList[Math::Rand(0, SpawnsList.count - 1)];
        }
        SM::Spawn(Player, 0, MapLandmarks_PlayerSpawn[SpawnId].PlayerSpawn);
        if (Player.Id == RabbitInfo.RabbitPlayerId) {
            SetRabbit(Player);
        } else {
            SetHunter(Player);
        }
        SpawnsList.remove(SpawnId);
    }
}
***


***Match_PlayLoop_ManageRabbitSelection***
***
if (RabbitInfo.RabbitPlayerId != NullId
    && (!Players.existskey(RabbitInfo.RabbitPlayerId) || Players[RabbitInfo.RabbitPlayerId].RequestsSpectate)) {
    RabbitInfo.RabbitPlayerId = NullId;
}

if (RabbitInfo.RabbitPlayerId == NullId) {
    // Choose hunter who last hit the rabbit
    if (RabbitInfo.LastHitRabbitPlayerId != NullId
        && Players.existskey(RabbitInfo.LastHitRabbitPlayerId)
        && Players[RabbitInfo.LastHitRabbitPlayerId].SpawnStatus == CSmPlayer::ESpawnStatus::Spawned
        && !Players[RabbitInfo.LastHitRabbitPlayerId].RequestsSpectate) {
        RabbitInfo.RabbitPlayerId = Players[RabbitInfo.LastHitRabbitPlayerId].Id;
        RabbitInfo.LastHitRabbitPlayerId = NullId;
    // Choose at random from all valid players
    } else {
        declare Ident[] EligiblePlayerIds;
        foreach (Player in Players) {
            if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && !Player.RequestsSpectate) {
                EligiblePlayerIds.add(Player.Id);
            }
        }
        if (EligiblePlayerIds.count > 0) {
            RabbitInfo.RabbitPlayerId = EligiblePlayerIds[Math::Rand(0, EligiblePlayerIds.count - 1)];
            RabbitInfo.LastHitRabbitPlayerId = NullId;
        }
    }

    if (RabbitInfo.RabbitPlayerId != NullId && Players.existskey(RabbitInfo.RabbitPlayerId)) {
        SetRabbit(Players[RabbitInfo.RabbitPlayerId]);
        Layers::Update(C_RabbitStatusLayerName, RabbitStatusML(Players[RabbitInfo.RabbitPlayerId]));
    } else {
        Layers::Update(C_RabbitStatusLayerName, RabbitStatusML(Null));
    }
}
***


***Match_PlayLoop***
***

+++Match_PlayLoop_HandleEvents+++
+++Match_PlayLoop_SpawnPlayers+++
+++Match_PlayLoop_ManageRabbitSelection+++

if (S_TimeLimit > 0 && Now > EndTime) {
    Message::SendBigMessage(_("Time limit reached"), 2000, 3, CUIConfig::EUISound::Silence, 0);
    MB_StopMatch();
}
***


***Match_EndMap***
***
EndTime = -1;
MB_Sleep(2000);
SM::UnspawnAllPlayers();
Scores::EndRound();
declare BestPlayerScore <=> Scores::GetBestPlayerMapPoints(Scores::C_Order_Descending);
if (BestPlayerScore != Null) {
    Scores::SetPlayerWinner(BestPlayerScore);
} else {
    Scores::ResetPlayerWinner();
}
***


Void SetHunter(CSmPlayer _Player) {
    _Player.ForceColor = <0.9,0.33,0.0>;
    _Player.ArmorMax = 100 * S_HunterArmor;
    _Player.Armor = 100 * S_HunterArmor;
}

Void SetRabbit(CSmPlayer _Player) {
    _Player.ForceColor = <0.01,0.01,0.01>;
    _Player.ArmorMax = 100 * S_RabbitArmor;
    _Player.Armor = 100 * S_RabbitArmor;
    
    declare Text Message = TextLib::Compose(_("$<%1$> is now the Rabbit"), _Player.User.Name);
    Message::SendBigMessage(Message, 3000, 2, CUIConfig::EUISound::Notice, 0);
}

Text RabbitStatusML(CSmPlayer _Player) {
    declare Text RabbitName = "None";
    if (_Player != Null) {
        RabbitName = _Player.User.Name;
    }
    declare Text MLText = """<label posn="0 -65" halign="center" style="TextStaticVerySmall" text="$sCurrent Rabbit: $ccc$<{{{RabbitName}}}$>" />
    """;
    return MLText;
}

